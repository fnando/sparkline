{"version":3,"sources":["webpack://sparkline/webpack/bootstrap","webpack://sparkline/./src/sparkline.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;ACnEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,aAAa,GAAG,MAAM;;AAE7C;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA,KAAK;;AAEL,wBAAwB,EAAE,GAAG,EAAE;AAC/B,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,mCAAmC,WAAW,KAAK,WAAW,KAAK,aAAa,GAAG,WAAW;AAC9F,mCAAmC,WAAW,KAAK,EAAE,KAAK,aAAa,GAAG,EAAE;;AAE5E;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA","file":"sparkline.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/sparkline.js\");\n","function getY(max, height, diff, value) {\n  return parseFloat((height - (value * height / max) + diff).toFixed(2));\n}\n\nfunction removeChildren(svg) {\n  [...svg.querySelectorAll(\"*\")].forEach(element => svg.removeChild(element));\n}\n\nfunction defaultFetch(entry) {\n  return entry.value;\n}\n\nfunction buildElement(tag, attrs) {\n  const element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n\n  for (let name in attrs) {\n    element.setAttribute(name, attrs[name]);\n  }\n\n  return element;\n}\n\nexport function sparkline(svg, entries, options) {\n  removeChildren(svg);\n\n  if (entries.length <= 1) {\n    return;\n  }\n\n  options = options || {};\n\n  if (typeof(entries[0]) === \"number\") {\n    entries = entries.map(entry => {\n      return {value: entry};\n    });\n  }\n\n  // This function will be called whenever the mouse moves\n  // over the SVG. You can use it to render something like a\n  // tooltip.\n  const onmousemove = options.onmousemove;\n\n  // This function will be called whenever the mouse leaves\n  // the SVG area. You can use it to hide the tooltip.\n  const onmouseout = options.onmouseout;\n\n  // Define the style of fill: start or end\n  const fillStyle = options.fillStyle || 'start';\n\n  // Should we run in interactive mode? If yes, this will handle the\n  // cursor and spot position when moving the mouse.\n  const interactive = (\"interactive\" in options) ? options.interactive : !!onmousemove;\n\n  // Define how big should be the spot area.\n  const spotRadius = options.spotRadius || 2;\n  const spotDiameter = spotRadius * 2;\n\n  // Define how wide should be the cursor area.\n  const cursorWidth = options.cursorWidth || 2;\n\n  // Get the stroke width; this is used to compute the\n  // rendering offset.\n  const strokeWidth = parseFloat(svg.attributes[\"stroke-width\"].value);\n\n  // By default, data must be formatted as an array of numbers or\n  // an array of objects with the value key (like `[{value: 1}]`).\n  // You can set a custom function to return data for a different\n  // data structure.\n  const fetch = options.fetch || defaultFetch;\n\n  // Retrieve only values, easing the find for the maximum value.\n  const values = entries.map(entry => fetch(entry));\n\n  // The rendering width will account for the spot size.\n  const width = parseFloat(svg.attributes.width.value) - spotDiameter * 2;\n\n  // Get the SVG element's full height.\n  // This is used\n  const fullHeight = parseFloat(svg.attributes.height.value);\n\n  // The rendering height accounts for stroke width and spot size.\n  const height = fullHeight - (strokeWidth * 2) - spotDiameter;\n\n  // The maximum value. This is used to calculate the Y coord of\n  // each sparkline datapoint.\n  const max = Math.max(...values);\n\n  // Some arbitrary value to remove the cursor and spot out of\n  // the viewing canvas.\n  const offscreen = -1000;\n\n  // Cache the last item index.\n  const lastItemIndex = values.length - 1;\n\n  // Calculate the X coord base step.\n  const offset = width / lastItemIndex;\n\n  // Hold all datapoints, which is whatever we got as the entry plus\n  // x/y coords and the index.\n  const datapoints = [];\n\n  // Hold the line coordinates.\n  const pathY = getY(max, height, strokeWidth + spotRadius, values[0]);\n  let pathCoords = `M${spotDiameter} ${pathY}`;\n\n  values.forEach((value, index) => {\n    const x = index * offset + spotDiameter;\n    const y = getY(max, height, strokeWidth + spotRadius, value);\n\n    datapoints.push(Object.assign({}, entries[index], {\n      index: index,\n      x: x,\n      y: y\n    }));\n\n    pathCoords += ` L ${x} ${y}`;\n  });\n\n  const path = buildElement(\"path\", {\n    class: \"sparkline--line\",\n    d: pathCoords,\n    fill: \"none\"\n  });\n\n  let fillCoords = fillStyle == 'start'\n                              ? `${pathCoords} V ${fullHeight} L ${spotDiameter} ${fullHeight} Z`\n                              : `${pathCoords} V ${0} L ${spotDiameter} ${0} Z`;\n\n  const fill = buildElement(\"path\", {\n    class: \"sparkline--fill\",\n    d: fillCoords,\n    stroke: \"none\"\n  });\n\n  svg.appendChild(fill);\n  svg.appendChild(path);\n\n  if (!interactive) {\n    return;\n  }\n\n  const cursor = buildElement(\"line\", {\n    class: \"sparkline--cursor\",\n    x1: offscreen,\n    x2: offscreen,\n    y1: 0,\n    y2: fullHeight,\n    \"stroke-width\": cursorWidth\n  });\n\n  const spot = buildElement(\"circle\", {\n    class: \"sparkline--spot\",\n    cx: offscreen,\n    cy: offscreen,\n    r: spotRadius\n  });\n\n  svg.appendChild(cursor);\n  svg.appendChild(spot);\n\n  const interactionLayer = buildElement(\"rect\", {\n    width: svg.attributes.width.value,\n    height: svg.attributes.height.value,\n    style: \"fill: transparent; stroke: transparent\",\n    class: \"sparkline--interaction-layer\",\n  });\n  svg.appendChild(interactionLayer);\n\n  interactionLayer.addEventListener(\"mouseout\", event => {\n    cursor.setAttribute(\"x1\", offscreen);\n    cursor.setAttribute(\"x2\", offscreen);\n\n    spot.setAttribute(\"cx\", offscreen);\n\n    if (onmouseout) {\n      onmouseout(event);\n    }\n  });\n\n  interactionLayer.addEventListener(\"mousemove\", event => {\n    const mouseX = event.offsetX;\n\n    let nextDataPoint = datapoints.find(entry => {\n      return entry.x >= mouseX;\n    });\n\n    if (!nextDataPoint) {\n      nextDataPoint = datapoints[lastItemIndex];\n    }\n\n    let previousDataPoint = datapoints[datapoints.indexOf(nextDataPoint) - 1];\n    let currentDataPoint;\n    let halfway;\n\n    if (previousDataPoint) {\n      halfway = previousDataPoint.x + ((nextDataPoint.x - previousDataPoint.x) / 2);\n      currentDataPoint = mouseX >= halfway ? nextDataPoint : previousDataPoint;\n    } else {\n      currentDataPoint = nextDataPoint;\n    }\n\n    const x = currentDataPoint.x;\n    const y = currentDataPoint.y;\n\n    spot.setAttribute(\"cx\", x);\n    spot.setAttribute(\"cy\", y);\n\n    cursor.setAttribute(\"x1\", x);\n    cursor.setAttribute(\"x2\", x);\n\n    if (onmousemove) {\n      onmousemove(event, currentDataPoint);\n    }\n  });\n}\n\nexport default sparkline;\n"],"sourceRoot":""}